/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Clinique } from '../model/clinique';
import { Patient } from '../model/patient';
import { PatientAndAbscenceDto } from '../model/patientAndAbscenceDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PatientControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deactivatePatient
     * 
     * @param active active
     * @param patientId patientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deactivatePatientUsingPUT(active: boolean, patientId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deactivatePatientUsingPUT(active: boolean, patientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deactivatePatientUsingPUT(active: boolean, patientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deactivatePatientUsingPUT(active: boolean, patientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (active === null || active === undefined) {
            throw new Error('Required parameter active was null or undefined when calling deactivatePatientUsingPUT.');
        }

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling deactivatePatientUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/v1/patients/${encodeURIComponent(String(patientId))}/active/${encodeURIComponent(String(active))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletePatient
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePatientUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePatientUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePatientUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePatientUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePatientUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/patients/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPatientPage
     * 
     * @param numberOfElements numberOfElements
     * @param page page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPatientPageUsingGET(numberOfElements: number, page: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPatientPageUsingGET(numberOfElements: number, page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPatientPageUsingGET(numberOfElements: number, page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPatientPageUsingGET(numberOfElements: number, page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (numberOfElements === null || numberOfElements === undefined) {
            throw new Error('Required parameter numberOfElements was null or undefined when calling getPatientPageUsingGET.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPatientPageUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v1/patients/${encodeURIComponent(String(page))}/${encodeURIComponent(String(numberOfElements))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPatient
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPatientUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPatientUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPatientUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPatientUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPatientUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v1/patients/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postClinique
     * 
     * @param clinique clinique
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCliniqueUsingPOST(clinique: Clinique, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCliniqueUsingPOST(clinique: Clinique, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCliniqueUsingPOST(clinique: Clinique, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCliniqueUsingPOST(clinique: Clinique, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (clinique === null || clinique === undefined) {
            throw new Error('Required parameter clinique was null or undefined when calling postCliniqueUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        console.log(`${this.basePath}/v1/clinique`);

var response = this.httpClient.post<any>(`${this.basePath}/v1/clinique`,
clinique,
{
    withCredentials: this.configuration.withCredentials,
    headers: headers,
    observe: observe,
    reportProgress: reportProgress
}
);
console.log(response);
        return response;
    }

    /**
     * postPatientAndSeance
     * 
     * @param authorization Authorization
     * @param month month
     * @param patientAndAbscenceDto patientAndAbscenceDto
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPatientAndSeanceUsingPOST(authorization: string, month: number, patientAndAbscenceDto: PatientAndAbscenceDto, year: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPatientAndSeanceUsingPOST(authorization: string, month: number, patientAndAbscenceDto: PatientAndAbscenceDto, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPatientAndSeanceUsingPOST(authorization: string, month: number, patientAndAbscenceDto: PatientAndAbscenceDto, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPatientAndSeanceUsingPOST(authorization: string, month: number, patientAndAbscenceDto: PatientAndAbscenceDto, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling postPatientAndSeanceUsingPOST.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling postPatientAndSeanceUsingPOST.');
        }

        if (patientAndAbscenceDto === null || patientAndAbscenceDto === undefined) {
            throw new Error('Required parameter patientAndAbscenceDto was null or undefined when calling postPatientAndSeanceUsingPOST.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling postPatientAndSeanceUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/patients/seances/month/${encodeURIComponent(String(month))}/year/${encodeURIComponent(String(year))}`,
            patientAndAbscenceDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postPatient
     * 
     * @param patient patient
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPatientUsingPOST(patient: Patient, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postPatientUsingPOST(patient: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postPatientUsingPOST(patient: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postPatientUsingPOST(patient: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patient === null || patient === undefined) {
            throw new Error('Required parameter patient was null or undefined when calling postPatientUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/patients`,
            patient,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAllPatientStatus
     * 
     * @param active active
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAllPatientStatusUsingPUT(active: boolean, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAllPatientStatusUsingPUT(active: boolean, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAllPatientStatusUsingPUT(active: boolean, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAllPatientStatusUsingPUT(active: boolean, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (active === null || active === undefined) {
            throw new Error('Required parameter active was null or undefined when calling updateAllPatientStatusUsingPUT.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateAllPatientStatusUsingPUT.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/v1/patients/all/active/${encodeURIComponent(String(active))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updatePatient
     * 
     * @param patient patient
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePatientUsingPUT(patient: Patient, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePatientUsingPUT(patient: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePatientUsingPUT(patient: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePatientUsingPUT(patient: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patient === null || patient === undefined) {
            throw new Error('Required parameter patient was null or undefined when calling updatePatientUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/v1/patients`,
            patient,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
