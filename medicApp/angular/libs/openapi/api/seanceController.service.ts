/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InputStreamResource } from '../model/inputStreamResource';
import { Seance } from '../model/seance';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SeanceControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deleteSeance
     * 
     * @param seanceId seanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSeanceUsingDELETE(seanceId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSeanceUsingDELETE(seanceId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSeanceUsingDELETE(seanceId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSeanceUsingDELETE(seanceId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (seanceId === null || seanceId === undefined) {
            throw new Error('Required parameter seanceId was null or undefined when calling deleteSeanceUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v1/seances/${encodeURIComponent(String(seanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBorderauPatients
     * 
     * @param authorization Authorization
     * @param month month
     * @param patientIds patientIds
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBorderauPatientsUsingPOST(authorization: string, month: number, patientIds: Array<number>, year: number, observe?: 'body', reportProgress?: boolean): Observable<InputStreamResource>;
    public getBorderauPatientsUsingPOST(authorization: string, month: number, patientIds: Array<number>, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InputStreamResource>>;
    public getBorderauPatientsUsingPOST(authorization: string, month: number, patientIds: Array<number>, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InputStreamResource>>;
    public getBorderauPatientsUsingPOST(authorization: string, month: number, patientIds: Array<number>, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getBorderauPatientsUsingPOST.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling getBorderauPatientsUsingPOST.');
        }

        if (patientIds === null || patientIds === undefined) {
            throw new Error('Required parameter patientIds was null or undefined when calling getBorderauPatientsUsingPOST.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling getBorderauPatientsUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InputStreamResource>(`${this.basePath}/v1/borderau/month/${encodeURIComponent(String(month))}/year/${encodeURIComponent(String(year))}`,
            patientIds,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFacturePatients
     * 
     * @param authorization Authorization
     * @param month month
     * @param patientIds patientIds
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFacturePatientsUsingPOST(authorization: string, month: number, patientIds: Array<string>, year: number, observe?: 'body', reportProgress?: boolean): Observable<InputStreamResource>;
    public getFacturePatientsUsingPOST(authorization: string, month: number, patientIds: Array<string>, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InputStreamResource>>;
    public getFacturePatientsUsingPOST(authorization: string, month: number, patientIds: Array<string>, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InputStreamResource>>;
    public getFacturePatientsUsingPOST(authorization: string, month: number, patientIds: Array<string>, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getFacturePatientsUsingPOST.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling getFacturePatientsUsingPOST.');
        }

        if (patientIds === null || patientIds === undefined) {
            throw new Error('Required parameter patientIds was null or undefined when calling getFacturePatientsUsingPOST.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling getFacturePatientsUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InputStreamResource>(`${this.basePath}/v1/list/factures/month/${encodeURIComponent(String(month))}/year/${encodeURIComponent(String(year))}`,
            patientIds,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postSeance
     * 
     * @param seance seance
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSeanceUsingPOST(seance: Seance, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postSeanceUsingPOST(seance: Seance, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postSeanceUsingPOST(seance: Seance, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postSeanceUsingPOST(seance: Seance, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (seance === null || seance === undefined) {
            throw new Error('Required parameter seance was null or undefined when calling postSeanceUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/seances`,
            seance,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postSeancesOfListPatient
     * 
     * @param endDate endDate
     * @param patientIds patientIds
     * @param startDate startDate
     * @param typeSeanceId typeSeanceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSeancesOfListPatientUsingPOST(endDate: string, patientIds: Array<string>, startDate: string, typeSeanceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postSeancesOfListPatientUsingPOST(endDate: string, patientIds: Array<string>, startDate: string, typeSeanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postSeancesOfListPatientUsingPOST(endDate: string, patientIds: Array<string>, startDate: string, typeSeanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postSeancesOfListPatientUsingPOST(endDate: string, patientIds: Array<string>, startDate: string, typeSeanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling postSeancesOfListPatientUsingPOST.');
        }

        if (patientIds === null || patientIds === undefined) {
            throw new Error('Required parameter patientIds was null or undefined when calling postSeancesOfListPatientUsingPOST.');
        }

        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling postSeancesOfListPatientUsingPOST.');
        }

        if (typeSeanceId === null || typeSeanceId === undefined) {
            throw new Error('Required parameter typeSeanceId was null or undefined when calling postSeancesOfListPatientUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1/list/seances/typeSeanceId/${encodeURIComponent(String(typeSeanceId))}/startDate/${encodeURIComponent(String(startDate))}/endDate/${encodeURIComponent(String(endDate))}`,
            patientIds,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * txtResponse
     * 
     * @param authorization Authorization
     * @param month month
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public txtResponseUsingGET(authorization: string, month: number, year: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public txtResponseUsingGET(authorization: string, month: number, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public txtResponseUsingGET(authorization: string, month: number, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public txtResponseUsingGET(authorization: string, month: number, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling txtResponseUsingGET.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling txtResponseUsingGET.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling txtResponseUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v1/txt/borderau/month/${encodeURIComponent(String(month))}/year/${encodeURIComponent(String(year))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
